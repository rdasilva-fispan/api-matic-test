/*
 * FispanComLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package cloud.fispan.dev1.controllers;

import cloud.fispan.dev1.ApiHelper;
import cloud.fispan.dev1.AuthManager;
import cloud.fispan.dev1.Configuration;
import cloud.fispan.dev1.exceptions.ApiException;
import cloud.fispan.dev1.http.Headers;
import cloud.fispan.dev1.http.client.HttpClient;
import cloud.fispan.dev1.http.client.HttpContext;
import cloud.fispan.dev1.http.request.HttpRequest;
import cloud.fispan.dev1.http.response.HttpResponse;
import cloud.fispan.dev1.http.response.HttpStringResponse;
import cloud.fispan.dev1.models.Vendor;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class VendorController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public VendorController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * This API will search FI.SPAN vendors associated with the logged in client or service provider
     * and return all the vendors found paginated. The default page size is 20. The page number and
     * its size can be changed using the optional parameter below * `page`: The page number to be
     * returned. * `size`: The size of the page to be returned.
     * @param  page  Optional parameter: The page number to be returned. It goes from 0 to N, where
     *         N depends on the number of records.
     * @param  size  Optional parameter: The number of records retrieved per page. Defaults to 20
     *         and goes up to 1000, even if it's set to a number greater than 1000.
     * @return    Returns the List of Vendor response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Vendor> listVendors(
            final Integer page,
            final Integer size) throws ApiException, IOException {
        HttpRequest request = buildListVendorsRequest(page, size);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListVendorsResponse(context);
    }

    /**
     * This API will search FI.SPAN vendors associated with the logged in client or service provider
     * and return all the vendors found paginated. The default page size is 20. The page number and
     * its size can be changed using the optional parameter below * `page`: The page number to be
     * returned. * `size`: The size of the page to be returned.
     * @param  page  Optional parameter: The page number to be returned. It goes from 0 to N, where
     *         N depends on the number of records.
     * @param  size  Optional parameter: The number of records retrieved per page. Defaults to 20
     *         and goes up to 1000, even if it's set to a number greater than 1000.
     * @return    Returns the List of Vendor response from the API call
     */
    public CompletableFuture<List<Vendor>> listVendorsAsync(
            final Integer page,
            final Integer size) {
        return makeHttpCallAsync(() -> buildListVendorsRequest(page, size),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleListVendorsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listVendors.
     */
    private HttpRequest buildListVendorsRequest(
            final Integer page,
            final Integer size) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/api/config-api/vendors");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("size",
                (size != null) ? size : 20);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for listVendors.
     * @return An object of type List of Vendor
     */
    private List<Vendor> handleListVendorsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Vendor> result = ApiHelper.deserializeArray(responseBody,
                Vendor[].class);
        return result;
    }

}
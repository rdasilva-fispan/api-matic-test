/*
 * FispanComLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package cloud.fispan.dev1.controllers;

import cloud.fispan.dev1.ApiHelper;
import cloud.fispan.dev1.AuthManager;
import cloud.fispan.dev1.Configuration;
import cloud.fispan.dev1.exceptions.ApiException;
import cloud.fispan.dev1.exceptions.ErrorException;
import cloud.fispan.dev1.http.Headers;
import cloud.fispan.dev1.http.client.HttpClient;
import cloud.fispan.dev1.http.client.HttpContext;
import cloud.fispan.dev1.http.request.HttpRequest;
import cloud.fispan.dev1.http.response.HttpResponse;
import cloud.fispan.dev1.http.response.HttpStringResponse;
import cloud.fispan.dev1.models.AuthToken;
import cloud.fispan.dev1.models.GrantTypeEnum;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class OAuthTokenController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public OAuthTokenController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * Doing the authentication requires that the grant_type is sent as a parameter. The possible
     * grant types are: * `client_credentials`: Used for service providers and end users. *
     * `password`: Used for admin users.
     * @param  grantType  Required parameter: The type of grant that will be used to authenticate
     *         the user. * `client_credentials` - OAuth2 client credentials flow. * `password` -
     *         OAuth2 password flow.
     * @param  username  Optional parameter: The username to be used to authenticate the user. Only
     *         valid on for grant_type `password`.
     * @param  password  Optional parameter: The password to be used to authenticate the user. Only
     *         valid on for grant_type `password`.
     * @return    Returns the AuthToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AuthToken getOAuthToken(
            final GrantTypeEnum grantType,
            final String username,
            final String password) throws ApiException, IOException {
        HttpRequest request = buildGetOAuthTokenRequest(grantType, username, password);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOAuthTokenResponse(context);
    }

    /**
     * Doing the authentication requires that the grant_type is sent as a parameter. The possible
     * grant types are: * `client_credentials`: Used for service providers and end users. *
     * `password`: Used for admin users.
     * @param  grantType  Required parameter: The type of grant that will be used to authenticate
     *         the user. * `client_credentials` - OAuth2 client credentials flow. * `password` -
     *         OAuth2 password flow.
     * @param  username  Optional parameter: The username to be used to authenticate the user. Only
     *         valid on for grant_type `password`.
     * @param  password  Optional parameter: The password to be used to authenticate the user. Only
     *         valid on for grant_type `password`.
     * @return    Returns the AuthToken response from the API call
     */
    public CompletableFuture<AuthToken> getOAuthTokenAsync(
            final GrantTypeEnum grantType,
            final String username,
            final String password) {
        return makeHttpCallAsync(() -> buildGetOAuthTokenRequest(grantType, username, password),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetOAuthTokenResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOAuthToken.
     */
    private HttpRequest buildGetOAuthTokenRequest(
            final GrantTypeEnum grantType,
            final String username,
            final String password) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/accounts/oauth/token");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("grant_type",
                (grantType != null) ? grantType.value() : null);
        queryParameters.put("username", username);
        queryParameters.put("password", password);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getOAuthToken.
     * @return An object of type AuthToken
     */
    private AuthToken handleGetOAuthTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ErrorException("Invalid Request", context);
        }
        if (responseCode == 401) {
            throw new ErrorException("Unauthorized Request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        AuthToken result = ApiHelper.deserialize(responseBody,
                AuthToken.class);

        return result;
    }

}
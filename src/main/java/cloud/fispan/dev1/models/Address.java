/*
 * FispanComLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package cloud.fispan.dev1.models;

import cloud.fispan.dev1.internal.OptionalNullable;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.List;

/**
 * This is a model class for Address type.
 */
public class Address {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> externalId;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> streetName;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> streetNumber;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> city;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> stateProvince;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> country;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> postalCode;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> line1;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> line2;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private List<AddressTypeEnum> types;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private List<PaymentTypeEnum> defaultFor;

    /**
     * Default constructor.
     */
    public Address() {
    }

    /**
     * Initialization constructor.
     * @param  externalId  String value for externalId.
     * @param  streetName  String value for streetName.
     * @param  streetNumber  String value for streetNumber.
     * @param  city  String value for city.
     * @param  stateProvince  String value for stateProvince.
     * @param  country  String value for country.
     * @param  postalCode  String value for postalCode.
     * @param  line1  String value for line1.
     * @param  line2  String value for line2.
     * @param  types  List of AddressTypeEnum value for types.
     * @param  defaultFor  List of PaymentTypeEnum value for defaultFor.
     */
    public Address(
            String externalId,
            String streetName,
            String streetNumber,
            String city,
            String stateProvince,
            String country,
            String postalCode,
            String line1,
            String line2,
            List<AddressTypeEnum> types,
            List<PaymentTypeEnum> defaultFor) {
        this.externalId = OptionalNullable.of(externalId);
        this.streetName = OptionalNullable.of(streetName);
        this.streetNumber = OptionalNullable.of(streetNumber);
        this.city = OptionalNullable.of(city);
        this.stateProvince = OptionalNullable.of(stateProvince);
        this.country = OptionalNullable.of(country);
        this.postalCode = OptionalNullable.of(postalCode);
        this.line1 = OptionalNullable.of(line1);
        this.line2 = OptionalNullable.of(line2);
        this.types = types;
        this.defaultFor = defaultFor;
    }

    /**
     * Internal initialization constructor.
     */
    protected Address(OptionalNullable<String> externalId, OptionalNullable<String> streetName,
            OptionalNullable<String> streetNumber, OptionalNullable<String> city,
            OptionalNullable<String> stateProvince, OptionalNullable<String> country,
            OptionalNullable<String> postalCode, OptionalNullable<String> line1,
            OptionalNullable<String> line2, List<AddressTypeEnum> types,
            List<PaymentTypeEnum> defaultFor) {
        this.externalId = externalId;
        this.streetName = streetName;
        this.streetNumber = streetNumber;
        this.city = city;
        this.stateProvince = stateProvince;
        this.country = country;
        this.postalCode = postalCode;
        this.line1 = line1;
        this.line2 = line2;
        this.types = types;
        this.defaultFor = defaultFor;
    }

    /**
     * Internal Getter for ExternalId.
     * The external identification for the address.
     * @return Returns the Internal String
     */
    @JsonGetter("externalId")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExternalId() {
        return this.externalId;
    }

    /**
     * Getter for ExternalId.
     * The external identification for the address.
     * @return Returns the String
     */
    public String getExternalId() {
        return OptionalNullable.getFrom(externalId);
    }

    /**
     * Setter for ExternalId.
     * The external identification for the address.
     * @param externalId Value for String
     */
    @JsonSetter("externalId")
    public void setExternalId(String externalId) {
        this.externalId = OptionalNullable.of(externalId);
    }

    /**
     * UnSetter for ExternalId.
     * The external identification for the address.
     */
    public void unsetExternalId() {
        externalId = null;
    }

    /**
     * Internal Getter for StreetName.
     * The name of the street.
     * @return Returns the Internal String
     */
    @JsonGetter("streetName")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStreetName() {
        return this.streetName;
    }

    /**
     * Getter for StreetName.
     * The name of the street.
     * @return Returns the String
     */
    public String getStreetName() {
        return OptionalNullable.getFrom(streetName);
    }

    /**
     * Setter for StreetName.
     * The name of the street.
     * @param streetName Value for String
     */
    @JsonSetter("streetName")
    public void setStreetName(String streetName) {
        this.streetName = OptionalNullable.of(streetName);
    }

    /**
     * UnSetter for StreetName.
     * The name of the street.
     */
    public void unsetStreetName() {
        streetName = null;
    }

    /**
     * Internal Getter for StreetNumber.
     * The property number on the given street.
     * @return Returns the Internal String
     */
    @JsonGetter("streetNumber")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStreetNumber() {
        return this.streetNumber;
    }

    /**
     * Getter for StreetNumber.
     * The property number on the given street.
     * @return Returns the String
     */
    public String getStreetNumber() {
        return OptionalNullable.getFrom(streetNumber);
    }

    /**
     * Setter for StreetNumber.
     * The property number on the given street.
     * @param streetNumber Value for String
     */
    @JsonSetter("streetNumber")
    public void setStreetNumber(String streetNumber) {
        this.streetNumber = OptionalNullable.of(streetNumber);
    }

    /**
     * UnSetter for StreetNumber.
     * The property number on the given street.
     */
    public void unsetStreetNumber() {
        streetNumber = null;
    }

    /**
     * Internal Getter for City.
     * The city where the address is located
     * @return Returns the Internal String
     */
    @JsonGetter("city")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCity() {
        return this.city;
    }

    /**
     * Getter for City.
     * The city where the address is located
     * @return Returns the String
     */
    public String getCity() {
        return OptionalNullable.getFrom(city);
    }

    /**
     * Setter for City.
     * The city where the address is located
     * @param city Value for String
     */
    @JsonSetter("city")
    public void setCity(String city) {
        this.city = OptionalNullable.of(city);
    }

    /**
     * UnSetter for City.
     * The city where the address is located
     */
    public void unsetCity() {
        city = null;
    }

    /**
     * Internal Getter for StateProvince.
     * The state or province where the address is located.
     * @return Returns the Internal String
     */
    @JsonGetter("stateProvince")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStateProvince() {
        return this.stateProvince;
    }

    /**
     * Getter for StateProvince.
     * The state or province where the address is located.
     * @return Returns the String
     */
    public String getStateProvince() {
        return OptionalNullable.getFrom(stateProvince);
    }

    /**
     * Setter for StateProvince.
     * The state or province where the address is located.
     * @param stateProvince Value for String
     */
    @JsonSetter("stateProvince")
    public void setStateProvince(String stateProvince) {
        this.stateProvince = OptionalNullable.of(stateProvince);
    }

    /**
     * UnSetter for StateProvince.
     * The state or province where the address is located.
     */
    public void unsetStateProvince() {
        stateProvince = null;
    }

    /**
     * Internal Getter for Country.
     * The country where the address is located.
     * @return Returns the Internal String
     */
    @JsonGetter("country")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCountry() {
        return this.country;
    }

    /**
     * Getter for Country.
     * The country where the address is located.
     * @return Returns the String
     */
    public String getCountry() {
        return OptionalNullable.getFrom(country);
    }

    /**
     * Setter for Country.
     * The country where the address is located.
     * @param country Value for String
     */
    @JsonSetter("country")
    public void setCountry(String country) {
        this.country = OptionalNullable.of(country);
    }

    /**
     * UnSetter for Country.
     * The country where the address is located.
     */
    public void unsetCountry() {
        country = null;
    }

    /**
     * Internal Getter for PostalCode.
     * The address' postal code.
     * @return Returns the Internal String
     */
    @JsonGetter("postalCode")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPostalCode() {
        return this.postalCode;
    }

    /**
     * Getter for PostalCode.
     * The address' postal code.
     * @return Returns the String
     */
    public String getPostalCode() {
        return OptionalNullable.getFrom(postalCode);
    }

    /**
     * Setter for PostalCode.
     * The address' postal code.
     * @param postalCode Value for String
     */
    @JsonSetter("postalCode")
    public void setPostalCode(String postalCode) {
        this.postalCode = OptionalNullable.of(postalCode);
    }

    /**
     * UnSetter for PostalCode.
     * The address' postal code.
     */
    public void unsetPostalCode() {
        postalCode = null;
    }

    /**
     * Internal Getter for Line1.
     * The line 1 for the address.
     * @return Returns the Internal String
     */
    @JsonGetter("line1")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLine1() {
        return this.line1;
    }

    /**
     * Getter for Line1.
     * The line 1 for the address.
     * @return Returns the String
     */
    public String getLine1() {
        return OptionalNullable.getFrom(line1);
    }

    /**
     * Setter for Line1.
     * The line 1 for the address.
     * @param line1 Value for String
     */
    @JsonSetter("line1")
    public void setLine1(String line1) {
        this.line1 = OptionalNullable.of(line1);
    }

    /**
     * UnSetter for Line1.
     * The line 1 for the address.
     */
    public void unsetLine1() {
        line1 = null;
    }

    /**
     * Internal Getter for Line2.
     * The line 2 for the address.
     * @return Returns the Internal String
     */
    @JsonGetter("line2")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLine2() {
        return this.line2;
    }

    /**
     * Getter for Line2.
     * The line 2 for the address.
     * @return Returns the String
     */
    public String getLine2() {
        return OptionalNullable.getFrom(line2);
    }

    /**
     * Setter for Line2.
     * The line 2 for the address.
     * @param line2 Value for String
     */
    @JsonSetter("line2")
    public void setLine2(String line2) {
        this.line2 = OptionalNullable.of(line2);
    }

    /**
     * UnSetter for Line2.
     * The line 2 for the address.
     */
    public void unsetLine2() {
        line2 = null;
    }

    /**
     * Getter for Types.
     * The types of the address.
     * @return Returns the List of AddressTypeEnum
     */
    @JsonGetter("types")
    public List<AddressTypeEnum> getTypes() {
        return types;
    }

    /**
     * Setter for Types.
     * The types of the address.
     * @param types Value for List of AddressTypeEnum
     */
    @JsonSetter("types")
    public void setTypes(List<AddressTypeEnum> types) {
        this.types = types;
    }

    /**
     * Getter for DefaultFor.
     * Indicates what payment types will use this address as their default address
     * @return Returns the List of PaymentTypeEnum
     */
    @JsonGetter("defaultFor")
    public List<PaymentTypeEnum> getDefaultFor() {
        return defaultFor;
    }

    /**
     * Setter for DefaultFor.
     * Indicates what payment types will use this address as their default address
     * @param defaultFor Value for List of PaymentTypeEnum
     */
    @JsonSetter("defaultFor")
    public void setDefaultFor(List<PaymentTypeEnum> defaultFor) {
        this.defaultFor = defaultFor;
    }

    /**
     * Converts this Address into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Address [" + "externalId=" + externalId + ", streetName=" + streetName
                + ", streetNumber=" + streetNumber + ", city=" + city + ", stateProvince="
                + stateProvince + ", country=" + country + ", postalCode=" + postalCode + ", line1="
                + line1 + ", line2=" + line2 + ", types=" + types + ", defaultFor=" + defaultFor
                + "]";
    }

    /**
     * Builds a new {@link Address.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Address.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .types(getTypes())
                .defaultFor(getDefaultFor());
        builder.externalId = internalGetExternalId();
        builder.streetName = internalGetStreetName();
        builder.streetNumber = internalGetStreetNumber();
        builder.city = internalGetCity();
        builder.stateProvince = internalGetStateProvince();
        builder.country = internalGetCountry();
        builder.postalCode = internalGetPostalCode();
        builder.line1 = internalGetLine1();
        builder.line2 = internalGetLine2();
        return builder;
    }

    /**
     * Class to build instances of {@link Address}.
     */
    public static class Builder {
        private OptionalNullable<String> externalId;
        private OptionalNullable<String> streetName;
        private OptionalNullable<String> streetNumber;
        private OptionalNullable<String> city;
        private OptionalNullable<String> stateProvince;
        private OptionalNullable<String> country;
        private OptionalNullable<String> postalCode;
        private OptionalNullable<String> line1;
        private OptionalNullable<String> line2;
        private List<AddressTypeEnum> types;
        private List<PaymentTypeEnum> defaultFor;



        /**
         * Setter for externalId.
         * @param  externalId  String value for externalId.
         * @return Builder
         */
        public Builder externalId(String externalId) {
            this.externalId = OptionalNullable.of(externalId);
            return this;
        }

        /**
         * UnSetter for externalId.
         * @return Builder
         */
        public Builder unsetExternalId() {
            externalId = null;
            return this;
        }

        /**
         * Setter for streetName.
         * @param  streetName  String value for streetName.
         * @return Builder
         */
        public Builder streetName(String streetName) {
            this.streetName = OptionalNullable.of(streetName);
            return this;
        }

        /**
         * UnSetter for streetName.
         * @return Builder
         */
        public Builder unsetStreetName() {
            streetName = null;
            return this;
        }

        /**
         * Setter for streetNumber.
         * @param  streetNumber  String value for streetNumber.
         * @return Builder
         */
        public Builder streetNumber(String streetNumber) {
            this.streetNumber = OptionalNullable.of(streetNumber);
            return this;
        }

        /**
         * UnSetter for streetNumber.
         * @return Builder
         */
        public Builder unsetStreetNumber() {
            streetNumber = null;
            return this;
        }

        /**
         * Setter for city.
         * @param  city  String value for city.
         * @return Builder
         */
        public Builder city(String city) {
            this.city = OptionalNullable.of(city);
            return this;
        }

        /**
         * UnSetter for city.
         * @return Builder
         */
        public Builder unsetCity() {
            city = null;
            return this;
        }

        /**
         * Setter for stateProvince.
         * @param  stateProvince  String value for stateProvince.
         * @return Builder
         */
        public Builder stateProvince(String stateProvince) {
            this.stateProvince = OptionalNullable.of(stateProvince);
            return this;
        }

        /**
         * UnSetter for stateProvince.
         * @return Builder
         */
        public Builder unsetStateProvince() {
            stateProvince = null;
            return this;
        }

        /**
         * Setter for country.
         * @param  country  String value for country.
         * @return Builder
         */
        public Builder country(String country) {
            this.country = OptionalNullable.of(country);
            return this;
        }

        /**
         * UnSetter for country.
         * @return Builder
         */
        public Builder unsetCountry() {
            country = null;
            return this;
        }

        /**
         * Setter for postalCode.
         * @param  postalCode  String value for postalCode.
         * @return Builder
         */
        public Builder postalCode(String postalCode) {
            this.postalCode = OptionalNullable.of(postalCode);
            return this;
        }

        /**
         * UnSetter for postalCode.
         * @return Builder
         */
        public Builder unsetPostalCode() {
            postalCode = null;
            return this;
        }

        /**
         * Setter for line1.
         * @param  line1  String value for line1.
         * @return Builder
         */
        public Builder line1(String line1) {
            this.line1 = OptionalNullable.of(line1);
            return this;
        }

        /**
         * UnSetter for line1.
         * @return Builder
         */
        public Builder unsetLine1() {
            line1 = null;
            return this;
        }

        /**
         * Setter for line2.
         * @param  line2  String value for line2.
         * @return Builder
         */
        public Builder line2(String line2) {
            this.line2 = OptionalNullable.of(line2);
            return this;
        }

        /**
         * UnSetter for line2.
         * @return Builder
         */
        public Builder unsetLine2() {
            line2 = null;
            return this;
        }

        /**
         * Setter for types.
         * @param  types  List of AddressTypeEnum value for types.
         * @return Builder
         */
        public Builder types(List<AddressTypeEnum> types) {
            this.types = types;
            return this;
        }

        /**
         * Setter for defaultFor.
         * @param  defaultFor  List of PaymentTypeEnum value for defaultFor.
         * @return Builder
         */
        public Builder defaultFor(List<PaymentTypeEnum> defaultFor) {
            this.defaultFor = defaultFor;
            return this;
        }

        /**
         * Builds a new {@link Address} object using the set fields.
         * @return {@link Address}
         */
        public Address build() {
            return new Address(externalId, streetName, streetNumber, city, stateProvince, country,
                    postalCode, line1, line2, types, defaultFor);
        }
    }
}

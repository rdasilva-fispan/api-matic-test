/*
 * FispanComLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package cloud.fispan.dev1.models;

import cloud.fispan.dev1.internal.OptionalNullable;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

/**
 * This is a model class for Vendor type.
 */
public class Vendor {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String id;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> externalId;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private SubjectOfPayment subjectOfPayment;

    /**
     * Default constructor.
     */
    public Vendor() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  externalId  String value for externalId.
     * @param  subjectOfPayment  SubjectOfPayment value for subjectOfPayment.
     */
    public Vendor(
            String id,
            String externalId,
            SubjectOfPayment subjectOfPayment) {
        this.id = id;
        this.externalId = OptionalNullable.of(externalId);
        this.subjectOfPayment = subjectOfPayment;
    }

    /**
     * Internal initialization constructor.
     */
    protected Vendor(String id, OptionalNullable<String> externalId,
            SubjectOfPayment subjectOfPayment) {
        this.id = id;
        this.externalId = externalId;
        this.subjectOfPayment = subjectOfPayment;
    }

    /**
     * Getter for Id.
     * The vendor id in GUID format.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The vendor id in GUID format.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Internal Getter for ExternalId.
     * The vendor's external identification.
     * @return Returns the Internal String
     */
    @JsonGetter("externalId")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExternalId() {
        return this.externalId;
    }

    /**
     * Getter for ExternalId.
     * The vendor's external identification.
     * @return Returns the String
     */
    public String getExternalId() {
        return OptionalNullable.getFrom(externalId);
    }

    /**
     * Setter for ExternalId.
     * The vendor's external identification.
     * @param externalId Value for String
     */
    @JsonSetter("externalId")
    public void setExternalId(String externalId) {
        this.externalId = OptionalNullable.of(externalId);
    }

    /**
     * UnSetter for ExternalId.
     * The vendor's external identification.
     */
    public void unsetExternalId() {
        externalId = null;
    }

    /**
     * Getter for SubjectOfPayment.
     * @return Returns the SubjectOfPayment
     */
    @JsonGetter("subjectOfPayment")
    public SubjectOfPayment getSubjectOfPayment() {
        return subjectOfPayment;
    }

    /**
     * Setter for SubjectOfPayment.
     * @param subjectOfPayment Value for SubjectOfPayment
     */
    @JsonSetter("subjectOfPayment")
    public void setSubjectOfPayment(SubjectOfPayment subjectOfPayment) {
        this.subjectOfPayment = subjectOfPayment;
    }

    /**
     * Converts this Vendor into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Vendor [" + "id=" + id + ", externalId=" + externalId + ", subjectOfPayment="
                + subjectOfPayment + "]";
    }

    /**
     * Builds a new {@link Vendor.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Vendor.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .subjectOfPayment(getSubjectOfPayment());
        builder.externalId = internalGetExternalId();
        return builder;
    }

    /**
     * Class to build instances of {@link Vendor}.
     */
    public static class Builder {
        private String id;
        private OptionalNullable<String> externalId;
        private SubjectOfPayment subjectOfPayment;



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for externalId.
         * @param  externalId  String value for externalId.
         * @return Builder
         */
        public Builder externalId(String externalId) {
            this.externalId = OptionalNullable.of(externalId);
            return this;
        }

        /**
         * UnSetter for externalId.
         * @return Builder
         */
        public Builder unsetExternalId() {
            externalId = null;
            return this;
        }

        /**
         * Setter for subjectOfPayment.
         * @param  subjectOfPayment  SubjectOfPayment value for subjectOfPayment.
         * @return Builder
         */
        public Builder subjectOfPayment(SubjectOfPayment subjectOfPayment) {
            this.subjectOfPayment = subjectOfPayment;
            return this;
        }

        /**
         * Builds a new {@link Vendor} object using the set fields.
         * @return {@link Vendor}
         */
        public Vendor build() {
            return new Vendor(id, externalId, subjectOfPayment);
        }
    }
}

/*
 * FispanComLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package cloud.fispan.dev1.models;

import cloud.fispan.dev1.DateTimeHelper;
import cloud.fispan.dev1.internal.OptionalNullable;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.util.List;

/**
 * This is a model class for SubjectOfPayment type.
 */
public class SubjectOfPayment {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> externalId;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<TypeEnum> type;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> taxId;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<LocalDate> principleOfficerDoB;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> ssn;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private List<PaymentTypeEnum> availablePaymentMethods;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private List<Object> registeredPaymentMethods;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Address address;

    /**
     * Default constructor.
     */
    public SubjectOfPayment() {
    }

    /**
     * Initialization constructor.
     * @param  externalId  String value for externalId.
     * @param  type  TypeEnum value for type.
     * @param  taxId  String value for taxId.
     * @param  principleOfficerDoB  LocalDate value for principleOfficerDoB.
     * @param  ssn  String value for ssn.
     * @param  availablePaymentMethods  List of PaymentTypeEnum value for availablePaymentMethods.
     * @param  registeredPaymentMethods  List of Object value for registeredPaymentMethods.
     * @param  address  Address value for address.
     */
    public SubjectOfPayment(
            String externalId,
            TypeEnum type,
            String taxId,
            LocalDate principleOfficerDoB,
            String ssn,
            List<PaymentTypeEnum> availablePaymentMethods,
            List<Object> registeredPaymentMethods,
            Address address) {
        this.externalId = OptionalNullable.of(externalId);
        this.type = OptionalNullable.of(type);
        this.taxId = OptionalNullable.of(taxId);
        this.principleOfficerDoB = OptionalNullable.of(principleOfficerDoB);
        this.ssn = OptionalNullable.of(ssn);
        this.availablePaymentMethods = availablePaymentMethods;
        this.registeredPaymentMethods = registeredPaymentMethods;
        this.address = address;
    }

    /**
     * Internal initialization constructor.
     */
    protected SubjectOfPayment(OptionalNullable<String> externalId, OptionalNullable<TypeEnum> type,
            OptionalNullable<String> taxId, OptionalNullable<LocalDate> principleOfficerDoB,
            OptionalNullable<String> ssn, List<PaymentTypeEnum> availablePaymentMethods,
            List<Object> registeredPaymentMethods, Address address) {
        this.externalId = externalId;
        this.type = type;
        this.taxId = taxId;
        this.principleOfficerDoB = principleOfficerDoB;
        this.ssn = ssn;
        this.availablePaymentMethods = availablePaymentMethods;
        this.registeredPaymentMethods = registeredPaymentMethods;
        this.address = address;
    }

    /**
     * Internal Getter for ExternalId.
     * The external identification for the subject of payment.
     * @return Returns the Internal String
     */
    @JsonGetter("externalId")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExternalId() {
        return this.externalId;
    }

    /**
     * Getter for ExternalId.
     * The external identification for the subject of payment.
     * @return Returns the String
     */
    public String getExternalId() {
        return OptionalNullable.getFrom(externalId);
    }

    /**
     * Setter for ExternalId.
     * The external identification for the subject of payment.
     * @param externalId Value for String
     */
    @JsonSetter("externalId")
    public void setExternalId(String externalId) {
        this.externalId = OptionalNullable.of(externalId);
    }

    /**
     * UnSetter for ExternalId.
     * The external identification for the subject of payment.
     */
    public void unsetExternalId() {
        externalId = null;
    }

    /**
     * Internal Getter for Type.
     * The subject of payment's type.
     * @return Returns the Internal TypeEnum
     */
    @JsonGetter("type")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<TypeEnum> internalGetType() {
        return this.type;
    }

    /**
     * Getter for Type.
     * The subject of payment's type.
     * @return Returns the TypeEnum
     */
    public TypeEnum getType() {
        return OptionalNullable.getFrom(type);
    }

    /**
     * Setter for Type.
     * The subject of payment's type.
     * @param type Value for TypeEnum
     */
    @JsonSetter("type")
    public void setType(TypeEnum type) {
        this.type = OptionalNullable.of(type);
    }

    /**
     * UnSetter for Type.
     * The subject of payment's type.
     */
    public void unsetType() {
        type = null;
    }

    /**
     * Internal Getter for TaxId.
     * Taxation identification number for the company.
     * @return Returns the Internal String
     */
    @JsonGetter("taxId")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTaxId() {
        return this.taxId;
    }

    /**
     * Getter for TaxId.
     * Taxation identification number for the company.
     * @return Returns the String
     */
    public String getTaxId() {
        return OptionalNullable.getFrom(taxId);
    }

    /**
     * Setter for TaxId.
     * Taxation identification number for the company.
     * @param taxId Value for String
     */
    @JsonSetter("taxId")
    public void setTaxId(String taxId) {
        this.taxId = OptionalNullable.of(taxId);
    }

    /**
     * UnSetter for TaxId.
     * Taxation identification number for the company.
     */
    public void unsetTaxId() {
        taxId = null;
    }

    /**
     * Internal Getter for PrincipleOfficerDoB.
     * Date of Birth is of principle officer within the organization.
     * @return Returns the Internal LocalDate
     */
    @JsonGetter("principleOfficerDoB")
    @JsonSerialize(using = OptionalNullable.SimpleDateSerializer.class)
    protected OptionalNullable<LocalDate> internalGetPrincipleOfficerDoB() {
        return this.principleOfficerDoB;
    }

    /**
     * Getter for PrincipleOfficerDoB.
     * Date of Birth is of principle officer within the organization.
     * @return Returns the LocalDate
     */
    public LocalDate getPrincipleOfficerDoB() {
        return OptionalNullable.getFrom(principleOfficerDoB);
    }

    /**
     * Setter for PrincipleOfficerDoB.
     * Date of Birth is of principle officer within the organization.
     * @param principleOfficerDoB Value for LocalDate
     */
    @JsonSetter("principleOfficerDoB")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setPrincipleOfficerDoB(LocalDate principleOfficerDoB) {
        this.principleOfficerDoB = OptionalNullable.of(principleOfficerDoB);
    }

    /**
     * UnSetter for PrincipleOfficerDoB.
     * Date of Birth is of principle officer within the organization.
     */
    public void unsetPrincipleOfficerDoB() {
        principleOfficerDoB = null;
    }

    /**
     * Internal Getter for Ssn.
     * SSN is of principle officer within the organization. SSN length is either 4 or 10 characters
     * long
     * @return Returns the Internal String
     */
    @JsonGetter("ssn")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSsn() {
        return this.ssn;
    }

    /**
     * Getter for Ssn.
     * SSN is of principle officer within the organization. SSN length is either 4 or 10 characters
     * long
     * @return Returns the String
     */
    public String getSsn() {
        return OptionalNullable.getFrom(ssn);
    }

    /**
     * Setter for Ssn.
     * SSN is of principle officer within the organization. SSN length is either 4 or 10 characters
     * long
     * @param ssn Value for String
     */
    @JsonSetter("ssn")
    public void setSsn(String ssn) {
        this.ssn = OptionalNullable.of(ssn);
    }

    /**
     * UnSetter for Ssn.
     * SSN is of principle officer within the organization. SSN length is either 4 or 10 characters
     * long
     */
    public void unsetSsn() {
        ssn = null;
    }

    /**
     * Getter for AvailablePaymentMethods.
     * @return Returns the List of PaymentTypeEnum
     */
    @JsonGetter("availablePaymentMethods")
    public List<PaymentTypeEnum> getAvailablePaymentMethods() {
        return availablePaymentMethods;
    }

    /**
     * Setter for AvailablePaymentMethods.
     * @param availablePaymentMethods Value for List of PaymentTypeEnum
     */
    @JsonSetter("availablePaymentMethods")
    public void setAvailablePaymentMethods(List<PaymentTypeEnum> availablePaymentMethods) {
        this.availablePaymentMethods = availablePaymentMethods;
    }

    /**
     * Getter for RegisteredPaymentMethods.
     * The registered payment methods within the company.
     * @return Returns the List of Object
     */
    @JsonGetter("registeredPaymentMethods")
    public List<Object> getRegisteredPaymentMethods() {
        return registeredPaymentMethods;
    }

    /**
     * Setter for RegisteredPaymentMethods.
     * The registered payment methods within the company.
     * @param registeredPaymentMethods Value for List of Object
     */
    @JsonSetter("registeredPaymentMethods")
    public void setRegisteredPaymentMethods(List<Object> registeredPaymentMethods) {
        this.registeredPaymentMethods = registeredPaymentMethods;
    }

    /**
     * Getter for Address.
     * The address associated with the subject of payment.
     * @return Returns the Address
     */
    @JsonGetter("address")
    public Address getAddress() {
        return address;
    }

    /**
     * Setter for Address.
     * The address associated with the subject of payment.
     * @param address Value for Address
     */
    @JsonSetter("address")
    public void setAddress(Address address) {
        this.address = address;
    }

    /**
     * Converts this SubjectOfPayment into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SubjectOfPayment [" + "externalId=" + externalId + ", type=" + type + ", taxId="
                + taxId + ", principleOfficerDoB=" + principleOfficerDoB + ", ssn=" + ssn
                + ", availablePaymentMethods=" + availablePaymentMethods
                + ", registeredPaymentMethods=" + registeredPaymentMethods + ", address=" + address
                + "]";
    }

    /**
     * Builds a new {@link SubjectOfPayment.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SubjectOfPayment.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .availablePaymentMethods(getAvailablePaymentMethods())
                .registeredPaymentMethods(getRegisteredPaymentMethods())
                .address(getAddress());
        builder.externalId = internalGetExternalId();
        builder.type = internalGetType();
        builder.taxId = internalGetTaxId();
        builder.principleOfficerDoB = internalGetPrincipleOfficerDoB();
        builder.ssn = internalGetSsn();
        return builder;
    }

    /**
     * Class to build instances of {@link SubjectOfPayment}.
     */
    public static class Builder {
        private OptionalNullable<String> externalId;
        private OptionalNullable<TypeEnum> type;
        private OptionalNullable<String> taxId;
        private OptionalNullable<LocalDate> principleOfficerDoB;
        private OptionalNullable<String> ssn;
        private List<PaymentTypeEnum> availablePaymentMethods;
        private List<Object> registeredPaymentMethods;
        private Address address;



        /**
         * Setter for externalId.
         * @param  externalId  String value for externalId.
         * @return Builder
         */
        public Builder externalId(String externalId) {
            this.externalId = OptionalNullable.of(externalId);
            return this;
        }

        /**
         * UnSetter for externalId.
         * @return Builder
         */
        public Builder unsetExternalId() {
            externalId = null;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  TypeEnum value for type.
         * @return Builder
         */
        public Builder type(TypeEnum type) {
            this.type = OptionalNullable.of(type);
            return this;
        }

        /**
         * UnSetter for type.
         * @return Builder
         */
        public Builder unsetType() {
            type = null;
            return this;
        }

        /**
         * Setter for taxId.
         * @param  taxId  String value for taxId.
         * @return Builder
         */
        public Builder taxId(String taxId) {
            this.taxId = OptionalNullable.of(taxId);
            return this;
        }

        /**
         * UnSetter for taxId.
         * @return Builder
         */
        public Builder unsetTaxId() {
            taxId = null;
            return this;
        }

        /**
         * Setter for principleOfficerDoB.
         * @param  principleOfficerDoB  LocalDate value for principleOfficerDoB.
         * @return Builder
         */
        public Builder principleOfficerDoB(LocalDate principleOfficerDoB) {
            this.principleOfficerDoB = OptionalNullable.of(principleOfficerDoB);
            return this;
        }

        /**
         * UnSetter for principleOfficerDoB.
         * @return Builder
         */
        public Builder unsetPrincipleOfficerDoB() {
            principleOfficerDoB = null;
            return this;
        }

        /**
         * Setter for ssn.
         * @param  ssn  String value for ssn.
         * @return Builder
         */
        public Builder ssn(String ssn) {
            this.ssn = OptionalNullable.of(ssn);
            return this;
        }

        /**
         * UnSetter for ssn.
         * @return Builder
         */
        public Builder unsetSsn() {
            ssn = null;
            return this;
        }

        /**
         * Setter for availablePaymentMethods.
         * @param  availablePaymentMethods  List of PaymentTypeEnum value for
         *         availablePaymentMethods.
         * @return Builder
         */
        public Builder availablePaymentMethods(List<PaymentTypeEnum> availablePaymentMethods) {
            this.availablePaymentMethods = availablePaymentMethods;
            return this;
        }

        /**
         * Setter for registeredPaymentMethods.
         * @param  registeredPaymentMethods  List of Object value for registeredPaymentMethods.
         * @return Builder
         */
        public Builder registeredPaymentMethods(List<Object> registeredPaymentMethods) {
            this.registeredPaymentMethods = registeredPaymentMethods;
            return this;
        }

        /**
         * Setter for address.
         * @param  address  Address value for address.
         * @return Builder
         */
        public Builder address(Address address) {
            this.address = address;
            return this;
        }

        /**
         * Builds a new {@link SubjectOfPayment} object using the set fields.
         * @return {@link SubjectOfPayment}
         */
        public SubjectOfPayment build() {
            return new SubjectOfPayment(externalId, type, taxId, principleOfficerDoB, ssn,
                    availablePaymentMethods, registeredPaymentMethods, address);
        }
    }
}

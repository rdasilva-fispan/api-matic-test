/*
 * FispanComLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package cloud.fispan.dev1.models;

import cloud.fispan.dev1.internal.OptionalNullable;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.List;

/**
 * This is a model class for BankAccount type.
 */
public class BankAccount {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String id;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> externalId;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private List<ErpId> erpIds;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> accountLabel;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> accountHolderName;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> bankName;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> institutionNumber;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> transitNumber;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> routingNumber;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> accountNumber;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private List<ProductTypeEnum> enabledProducts;

    /**
     * Default constructor.
     */
    public BankAccount() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  externalId  String value for externalId.
     * @param  erpIds  List of ErpId value for erpIds.
     * @param  accountLabel  String value for accountLabel.
     * @param  accountHolderName  String value for accountHolderName.
     * @param  bankName  String value for bankName.
     * @param  institutionNumber  String value for institutionNumber.
     * @param  transitNumber  String value for transitNumber.
     * @param  routingNumber  String value for routingNumber.
     * @param  accountNumber  String value for accountNumber.
     * @param  enabledProducts  List of ProductTypeEnum value for enabledProducts.
     */
    public BankAccount(
            String id,
            String externalId,
            List<ErpId> erpIds,
            String accountLabel,
            String accountHolderName,
            String bankName,
            String institutionNumber,
            String transitNumber,
            String routingNumber,
            String accountNumber,
            List<ProductTypeEnum> enabledProducts) {
        this.id = id;
        this.externalId = OptionalNullable.of(externalId);
        this.erpIds = erpIds;
        this.accountLabel = OptionalNullable.of(accountLabel);
        this.accountHolderName = OptionalNullable.of(accountHolderName);
        this.bankName = OptionalNullable.of(bankName);
        this.institutionNumber = OptionalNullable.of(institutionNumber);
        this.transitNumber = OptionalNullable.of(transitNumber);
        this.routingNumber = OptionalNullable.of(routingNumber);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.enabledProducts = enabledProducts;
    }

    /**
     * Internal initialization constructor.
     */
    protected BankAccount(String id, OptionalNullable<String> externalId, List<ErpId> erpIds,
            OptionalNullable<String> accountLabel, OptionalNullable<String> accountHolderName,
            OptionalNullable<String> bankName, OptionalNullable<String> institutionNumber,
            OptionalNullable<String> transitNumber, OptionalNullable<String> routingNumber,
            OptionalNullable<String> accountNumber, List<ProductTypeEnum> enabledProducts) {
        this.id = id;
        this.externalId = externalId;
        this.erpIds = erpIds;
        this.accountLabel = accountLabel;
        this.accountHolderName = accountHolderName;
        this.bankName = bankName;
        this.institutionNumber = institutionNumber;
        this.transitNumber = transitNumber;
        this.routingNumber = routingNumber;
        this.accountNumber = accountNumber;
        this.enabledProducts = enabledProducts;
    }

    /**
     * Getter for Id.
     * The bank account identification
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The bank account identification
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Internal Getter for ExternalId.
     * Bank specific account id
     * @return Returns the Internal String
     */
    @JsonGetter("externalId")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExternalId() {
        return this.externalId;
    }

    /**
     * Getter for ExternalId.
     * Bank specific account id
     * @return Returns the String
     */
    public String getExternalId() {
        return OptionalNullable.getFrom(externalId);
    }

    /**
     * Setter for ExternalId.
     * Bank specific account id
     * @param externalId Value for String
     */
    @JsonSetter("externalId")
    public void setExternalId(String externalId) {
        this.externalId = OptionalNullable.of(externalId);
    }

    /**
     * UnSetter for ExternalId.
     * Bank specific account id
     */
    public void unsetExternalId() {
        externalId = null;
    }

    /**
     * Getter for ErpIds.
     * The ERP providers for the bank account
     * @return Returns the List of ErpId
     */
    @JsonGetter("erpIds")
    public List<ErpId> getErpIds() {
        return erpIds;
    }

    /**
     * Setter for ErpIds.
     * The ERP providers for the bank account
     * @param erpIds Value for List of ErpId
     */
    @JsonSetter("erpIds")
    public void setErpIds(List<ErpId> erpIds) {
        this.erpIds = erpIds;
    }

    /**
     * Internal Getter for AccountLabel.
     * A label to help identifying the account.
     * @return Returns the Internal String
     */
    @JsonGetter("accountLabel")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountLabel() {
        return this.accountLabel;
    }

    /**
     * Getter for AccountLabel.
     * A label to help identifying the account.
     * @return Returns the String
     */
    public String getAccountLabel() {
        return OptionalNullable.getFrom(accountLabel);
    }

    /**
     * Setter for AccountLabel.
     * A label to help identifying the account.
     * @param accountLabel Value for String
     */
    @JsonSetter("accountLabel")
    public void setAccountLabel(String accountLabel) {
        this.accountLabel = OptionalNullable.of(accountLabel);
    }

    /**
     * UnSetter for AccountLabel.
     * A label to help identifying the account.
     */
    public void unsetAccountLabel() {
        accountLabel = null;
    }

    /**
     * Internal Getter for AccountHolderName.
     * Legal entity or subsidiary name. Is used to override Client's name in payables.
     * @return Returns the Internal String
     */
    @JsonGetter("accountHolderName")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountHolderName() {
        return this.accountHolderName;
    }

    /**
     * Getter for AccountHolderName.
     * Legal entity or subsidiary name. Is used to override Client's name in payables.
     * @return Returns the String
     */
    public String getAccountHolderName() {
        return OptionalNullable.getFrom(accountHolderName);
    }

    /**
     * Setter for AccountHolderName.
     * Legal entity or subsidiary name. Is used to override Client's name in payables.
     * @param accountHolderName Value for String
     */
    @JsonSetter("accountHolderName")
    public void setAccountHolderName(String accountHolderName) {
        this.accountHolderName = OptionalNullable.of(accountHolderName);
    }

    /**
     * UnSetter for AccountHolderName.
     * Legal entity or subsidiary name. Is used to override Client's name in payables.
     */
    public void unsetAccountHolderName() {
        accountHolderName = null;
    }

    /**
     * Internal Getter for BankName.
     * The name of the bank
     * @return Returns the Internal String
     */
    @JsonGetter("bankName")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBankName() {
        return this.bankName;
    }

    /**
     * Getter for BankName.
     * The name of the bank
     * @return Returns the String
     */
    public String getBankName() {
        return OptionalNullable.getFrom(bankName);
    }

    /**
     * Setter for BankName.
     * The name of the bank
     * @param bankName Value for String
     */
    @JsonSetter("bankName")
    public void setBankName(String bankName) {
        this.bankName = OptionalNullable.of(bankName);
    }

    /**
     * UnSetter for BankName.
     * The name of the bank
     */
    public void unsetBankName() {
        bankName = null;
    }

    /**
     * Internal Getter for InstitutionNumber.
     * The number of the institution. We can also call it the bank number. Required for Canadian
     * bank accounts
     * @return Returns the Internal String
     */
    @JsonGetter("institutionNumber")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInstitutionNumber() {
        return this.institutionNumber;
    }

    /**
     * Getter for InstitutionNumber.
     * The number of the institution. We can also call it the bank number. Required for Canadian
     * bank accounts
     * @return Returns the String
     */
    public String getInstitutionNumber() {
        return OptionalNullable.getFrom(institutionNumber);
    }

    /**
     * Setter for InstitutionNumber.
     * The number of the institution. We can also call it the bank number. Required for Canadian
     * bank accounts
     * @param institutionNumber Value for String
     */
    @JsonSetter("institutionNumber")
    public void setInstitutionNumber(String institutionNumber) {
        this.institutionNumber = OptionalNullable.of(institutionNumber);
    }

    /**
     * UnSetter for InstitutionNumber.
     * The number of the institution. We can also call it the bank number. Required for Canadian
     * bank accounts
     */
    public void unsetInstitutionNumber() {
        institutionNumber = null;
    }

    /**
     * Internal Getter for TransitNumber.
     * The branch identification. Required for Canadian bank accounts
     * @return Returns the Internal String
     */
    @JsonGetter("transitNumber")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransitNumber() {
        return this.transitNumber;
    }

    /**
     * Getter for TransitNumber.
     * The branch identification. Required for Canadian bank accounts
     * @return Returns the String
     */
    public String getTransitNumber() {
        return OptionalNullable.getFrom(transitNumber);
    }

    /**
     * Setter for TransitNumber.
     * The branch identification. Required for Canadian bank accounts
     * @param transitNumber Value for String
     */
    @JsonSetter("transitNumber")
    public void setTransitNumber(String transitNumber) {
        this.transitNumber = OptionalNullable.of(transitNumber);
    }

    /**
     * UnSetter for TransitNumber.
     * The branch identification. Required for Canadian bank accounts
     */
    public void unsetTransitNumber() {
        transitNumber = null;
    }

    /**
     * Internal Getter for RoutingNumber.
     * Required for US bank accounts. This field is masked.
     * @return Returns the Internal String
     */
    @JsonGetter("routingNumber")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRoutingNumber() {
        return this.routingNumber;
    }

    /**
     * Getter for RoutingNumber.
     * Required for US bank accounts. This field is masked.
     * @return Returns the String
     */
    public String getRoutingNumber() {
        return OptionalNullable.getFrom(routingNumber);
    }

    /**
     * Setter for RoutingNumber.
     * Required for US bank accounts. This field is masked.
     * @param routingNumber Value for String
     */
    @JsonSetter("routingNumber")
    public void setRoutingNumber(String routingNumber) {
        this.routingNumber = OptionalNullable.of(routingNumber);
    }

    /**
     * UnSetter for RoutingNumber.
     * Required for US bank accounts. This field is masked.
     */
    public void unsetRoutingNumber() {
        routingNumber = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Required for both Canadian and US bank accounts. This field is masked.
     * @return Returns the Internal String
     */
    @JsonGetter("accountNumber")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Required for both Canadian and US bank accounts. This field is masked.
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Required for both Canadian and US bank accounts. This field is masked.
     * @param accountNumber Value for String
     */
    @JsonSetter("accountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Required for both Canadian and US bank accounts. This field is masked.
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Getter for EnabledProducts.
     * The products that are enabled for the given bank account.
     * @return Returns the List of ProductTypeEnum
     */
    @JsonGetter("enabledProducts")
    public List<ProductTypeEnum> getEnabledProducts() {
        return enabledProducts;
    }

    /**
     * Setter for EnabledProducts.
     * The products that are enabled for the given bank account.
     * @param enabledProducts Value for List of ProductTypeEnum
     */
    @JsonSetter("enabledProducts")
    public void setEnabledProducts(List<ProductTypeEnum> enabledProducts) {
        this.enabledProducts = enabledProducts;
    }

    /**
     * Converts this BankAccount into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "BankAccount [" + "id=" + id + ", externalId=" + externalId + ", erpIds=" + erpIds
                + ", accountLabel=" + accountLabel + ", accountHolderName=" + accountHolderName
                + ", bankName=" + bankName + ", institutionNumber=" + institutionNumber
                + ", transitNumber=" + transitNumber + ", routingNumber=" + routingNumber
                + ", accountNumber=" + accountNumber + ", enabledProducts=" + enabledProducts + "]";
    }

    /**
     * Builds a new {@link BankAccount.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link BankAccount.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .erpIds(getErpIds())
                .enabledProducts(getEnabledProducts());
        builder.externalId = internalGetExternalId();
        builder.accountLabel = internalGetAccountLabel();
        builder.accountHolderName = internalGetAccountHolderName();
        builder.bankName = internalGetBankName();
        builder.institutionNumber = internalGetInstitutionNumber();
        builder.transitNumber = internalGetTransitNumber();
        builder.routingNumber = internalGetRoutingNumber();
        builder.accountNumber = internalGetAccountNumber();
        return builder;
    }

    /**
     * Class to build instances of {@link BankAccount}.
     */
    public static class Builder {
        private String id;
        private OptionalNullable<String> externalId;
        private List<ErpId> erpIds;
        private OptionalNullable<String> accountLabel;
        private OptionalNullable<String> accountHolderName;
        private OptionalNullable<String> bankName;
        private OptionalNullable<String> institutionNumber;
        private OptionalNullable<String> transitNumber;
        private OptionalNullable<String> routingNumber;
        private OptionalNullable<String> accountNumber;
        private List<ProductTypeEnum> enabledProducts;



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for externalId.
         * @param  externalId  String value for externalId.
         * @return Builder
         */
        public Builder externalId(String externalId) {
            this.externalId = OptionalNullable.of(externalId);
            return this;
        }

        /**
         * UnSetter for externalId.
         * @return Builder
         */
        public Builder unsetExternalId() {
            externalId = null;
            return this;
        }

        /**
         * Setter for erpIds.
         * @param  erpIds  List of ErpId value for erpIds.
         * @return Builder
         */
        public Builder erpIds(List<ErpId> erpIds) {
            this.erpIds = erpIds;
            return this;
        }

        /**
         * Setter for accountLabel.
         * @param  accountLabel  String value for accountLabel.
         * @return Builder
         */
        public Builder accountLabel(String accountLabel) {
            this.accountLabel = OptionalNullable.of(accountLabel);
            return this;
        }

        /**
         * UnSetter for accountLabel.
         * @return Builder
         */
        public Builder unsetAccountLabel() {
            accountLabel = null;
            return this;
        }

        /**
         * Setter for accountHolderName.
         * @param  accountHolderName  String value for accountHolderName.
         * @return Builder
         */
        public Builder accountHolderName(String accountHolderName) {
            this.accountHolderName = OptionalNullable.of(accountHolderName);
            return this;
        }

        /**
         * UnSetter for accountHolderName.
         * @return Builder
         */
        public Builder unsetAccountHolderName() {
            accountHolderName = null;
            return this;
        }

        /**
         * Setter for bankName.
         * @param  bankName  String value for bankName.
         * @return Builder
         */
        public Builder bankName(String bankName) {
            this.bankName = OptionalNullable.of(bankName);
            return this;
        }

        /**
         * UnSetter for bankName.
         * @return Builder
         */
        public Builder unsetBankName() {
            bankName = null;
            return this;
        }

        /**
         * Setter for institutionNumber.
         * @param  institutionNumber  String value for institutionNumber.
         * @return Builder
         */
        public Builder institutionNumber(String institutionNumber) {
            this.institutionNumber = OptionalNullable.of(institutionNumber);
            return this;
        }

        /**
         * UnSetter for institutionNumber.
         * @return Builder
         */
        public Builder unsetInstitutionNumber() {
            institutionNumber = null;
            return this;
        }

        /**
         * Setter for transitNumber.
         * @param  transitNumber  String value for transitNumber.
         * @return Builder
         */
        public Builder transitNumber(String transitNumber) {
            this.transitNumber = OptionalNullable.of(transitNumber);
            return this;
        }

        /**
         * UnSetter for transitNumber.
         * @return Builder
         */
        public Builder unsetTransitNumber() {
            transitNumber = null;
            return this;
        }

        /**
         * Setter for routingNumber.
         * @param  routingNumber  String value for routingNumber.
         * @return Builder
         */
        public Builder routingNumber(String routingNumber) {
            this.routingNumber = OptionalNullable.of(routingNumber);
            return this;
        }

        /**
         * UnSetter for routingNumber.
         * @return Builder
         */
        public Builder unsetRoutingNumber() {
            routingNumber = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for enabledProducts.
         * @param  enabledProducts  List of ProductTypeEnum value for enabledProducts.
         * @return Builder
         */
        public Builder enabledProducts(List<ProductTypeEnum> enabledProducts) {
            this.enabledProducts = enabledProducts;
            return this;
        }

        /**
         * Builds a new {@link BankAccount} object using the set fields.
         * @return {@link BankAccount}
         */
        public BankAccount build() {
            return new BankAccount(id, externalId, erpIds, accountLabel, accountHolderName,
                    bankName, institutionNumber, transitNumber, routingNumber, accountNumber,
                    enabledProducts);
        }
    }
}
